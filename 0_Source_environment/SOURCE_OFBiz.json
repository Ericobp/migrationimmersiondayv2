{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS CloudFormation Sample Template OFBiz: OFBiz is Java ERP. This installation uses a remote Postgres server . It demonstrates using the AWS CloudFormation bootstrap scripts to deploy OFBiz. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {

    "DomainName" : {
      "Description" : "The fully qualified name for the source VPC, such as onpremsim.env. The name doesn't need to be publicly resolvable; it will resolve inside your VPC only.",
      "Type" : "String",
      "MinLength" : "5",
      "MaxLength" : "16",
      "Default" : "onpremsim.env"
    },

    "WEBInstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t3.small",
      "AllowedValues" : [ "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "OnPremSimVPC" : {
        "Description" : "VPC to place OFBiz.",
        "Type" : "AWS::EC2::VPC::Id"
    },
  
    "OnPremSimSubnet1" : {
       "Description" : "Private Subnet to place OFBiz.",
       "Type" : "AWS::EC2::Subnet::Id"
    },

    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DBUser" : {
      "Default": "ofbiz",
      "Description" : "The OFBiz database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBPassword" : {
      "NoEcho": "true",
      "Default": "ofbiz",
      "Description" : "The OFBiz database admin account password",
      "Type": "String",
      "MinLength": "5",
      "MaxLength": "41",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "RootPassword" : {
      "NoEcho": "true",
      "Description" : "server root password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "AWSRegionArch2AMI" : {
      "Description" : "The latest AMI ID for Amazon Linux",
      "Type" : "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default" : "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs"
    }
  },


  "Resources" : {
    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId": { "Ref": "OnPremSimVPC" },
        "GroupDescription" : "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80, "CidrIp" : "192.168.0.0/16"},
          {"IpProtocol" : "tcp", "FromPort" : 443, "ToPort" : 443, "CidrIp" : "192.168.0.0/16"},
          {"IpProtocol" : "tcp", "FromPort" : 8080, "ToPort" : 8080, "CidrIp" : "192.168.0.0/16"},
          {"IpProtocol" : "tcp", "FromPort" : 8443, "ToPort" : 8443, "CidrIp" : "192.168.0.0/16"},
          {"IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "icmp", "FromPort" : 8, "ToPort" : -1, "CidrIp" : "192.168.0.0/16" }
        ]
      }
    },
    "DatabaseSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId": { "Ref": "OnPremSimVPC" },
        "GroupDescription" : "Enable mariadb access via port 3306 locked down to the load balancer + SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : 5432, "ToPort" : 5432, "CidrIp" : "192.168.0.0/16"},
          {"IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "icmp", "FromPort" : 8, "ToPort" : -1, "CidrIp" : "192.168.0.0/16" }
        ]
      }
    },

    "DBServer": {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "OFBiz_install" : ["install_cfn", "register_dns", "setup_ssh", "install_OFBiz", "configure_OFBiz" ]
          },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.DBServer.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource DBServer ",
                          "         --configsets OFBiz_install ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},          
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },

          "register_dns" : {
            "files" : {
              "/tmp/nsupdate.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "ADDR=`/sbin/ifconfig eth0 | grep 'inet ' | awk '{print $2}' | sed -e s/.*://`\n",
                  "HOST=`hostname`\n",
                  "echo \"server dns.",{"Ref": "DomainName"},"\" > /tmp/nsupdate.txt\n",
                  "echo \"update delete $HOST A\" >> /tmp/nsupdate.txt\n",
                  "echo \"update add $HOST 86400 A $ADDR\" >> /tmp/nsupdate.txt\n",
                  "echo \"update delete $HOST PTR\" >> /tmp/nsupdate.txt\n",
                  "echo \"update add $HOST 86400 PTR $ADDR\" >> /tmp/nsupdate.txt\n",
                  "echo \"send\" >> /tmp/nsupdate.txt\n"               
                   ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "register_dns" : {
                "command" : "/tmp/nsupdate.sh ; nsupdate /tmp/nsupdate.txt"
              }
            }
          },

          "setup_ssh" : {
            "files" : {
              "/tmp/adduser.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "adduser user -g wheel\n",
                  "echo ",{ "Ref" : "RootPassword" }," | passwd user --stdin\n"            
                   ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              },
              "/tmp/fixssh.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\n",
                  "systemctl restart sshd"
                   ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_create_user" : {
                "command" : "/tmp/adduser.sh"
              },
              "02_fix_ssh" : {
                "command" : "/tmp/fixssh.sh"
              },
              "03_fix_sudo" : {
                "command" : "echo '%wheel        ALL=(ALL)       NOPASSWD: ALL' >>/etc/sudoers"
              }
            }
          },

          "install_OFBiz" : {
            "packages" : {
              "yum" : {
                "postgresql-server" : [],
                "python3"           : []
              }
            },
            "commands" : {
              "01_init_postgres" : {
                "command" : "/usr/bin/postgresql-setup --initdb"
              },
              "02_setup_postgres" : {
                "command" : "sed -i 's/#listen_addresses/listen_addresses/g' /var/lib/pgsql/data/postgresql.conf"
              },
              "03_setup_postgres" : {
                "command" : "sed -i 's/localhost/*/g' /var/lib/pgsql/data/postgresql.conf"
              },
              "04_postgres_remote" : {
                "command" : "echo 'host all ofbiz all password' >> /var/lib/pgsql/data/pg_hba.conf"
              }
            },
            "services" : {
              "sysvinit" : {
                "postgresql" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          },

          "configure_OFBiz" : {
            "files" : {
              "/tmp/setup_postgres.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "sudo -u postgres psql -c \"CREATE USER ofbiz WITH ENCRYPTED PASSWORD 'ofbiz';\"\n",
                  "sudo -u postgres psql -c \"CREATE DATABASE ofbiz;\"\n",
                  "sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE ofbiz TO ofbiz;\"\n",
                  "sudo -u postgres psql -c \"CREATE DATABASE ofbizolap;\"\n",
                  "sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE ofbizolap TO ofbiz;\"\n",
                  "sudo -u postgres psql -c \"CREATE DATABASE ofbiztenant;\"\n",
                  "sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE ofbiztenant TO ofbiz;\"\n"
                ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_configure_OFBiz" : {
                "command" : "/tmp/setup_postgres.sh"
              }
            }
          }
        }
      },

      "Properties": {
        "ImageId" : { "Ref" : "AWSRegionArch2AMI" },
        "InstanceType"   : { "Ref" : "WEBInstanceType" },
        "Tags" : [ {"Key" : "Environment", "Value" : "Source"}, {"Key" : "Name", "Value" : "MID-OFBiz-DB" } ],
        "NetworkInterfaces" : [ {
                "DeviceIndex" : "0",
                "AssociatePublicIpAddress" : false,
                "SubnetId" : { "Ref" : "OnPremSimSubnet1" },
                "GroupSet": [ { "Ref": "DatabaseSecurityGroup" } ]
              } ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "hostnamectl set-hostname ofbiz-db.",{"Ref": "DomainName"},"\n",
                       "yum update -y\n",
                       "amazon-linux-extras install postgresql9.6 -y\n",
                       "yum update -y aws-cfn-bootstrap\n",
                       "/opt/aws/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource DBServer ",
                       "         --configsets OFBiz_install ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",
                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource DBServer ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },

      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      }
    },

    
    "WebServer": {
      "DependsOn": "DBServer",
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "OFBiz_install" : ["install_cfn", "register_dns", "setup_ssh", "install_OFBiz" ]
          },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.WebServer.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource WebServer ",
                          "         --configsets OFBiz_install ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},          
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },

          "register_dns" : {
            "files" : {
              "/tmp/nsupdate.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "ADDR=`/sbin/ifconfig eth0 | grep 'inet ' | awk '{print $2}' | sed -e s/.*://`\n",
                  "HOST=`hostname`\n",
                  "echo \"server dns.",{"Ref": "DomainName"},"\" > /tmp/nsupdate.txt\n",
                  "echo \"update delete $HOST A\" >> /tmp/nsupdate.txt\n",
                  "echo \"update add $HOST 86400 A $ADDR\" >> /tmp/nsupdate.txt\n",
                  "echo \"update delete $HOST PTR\" >> /tmp/nsupdate.txt\n",
                  "echo \"update add $HOST 86400 PTR $ADDR\" >> /tmp/nsupdate.txt\n",
                  "echo \"send\" >> /tmp/nsupdate.txt\n"               
                   ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "register_dns" : {
                "command" : "/tmp/nsupdate.sh ; nsupdate /tmp/nsupdate.txt"
              }
            }
          },

          "setup_ssh" : {
            "files" : {
              "/tmp/adduser.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "adduser user -g wheel\n",
                  "echo ",{ "Ref" : "RootPassword" }," | passwd user --stdin\n"            
                   ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              },
              "/tmp/fixssh.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\n",
                  "systemctl restart sshd"
                   ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_create_user" : {
                "command" : "/tmp/adduser.sh"
              },
              "02_fix_ssh" : {
                "command" : "/tmp/fixssh.sh"
              },
              "03_fix_sudo" : {
                "command" : "echo '%wheel        ALL=(ALL)       NOPASSWD: ALL' >>/etc/sudoers"
              }
            }
          },

          "install_OFBiz" : {
            "packages" : {
              "yum" : {
                "java-1.8.0-openjdk-devel" : [],
                "java-1.8.0-openjdk"       : [],
                "perl-Digest-SHA"          : [],
                "python3"                  : []
              }
            },
            "sources" : {
              "/opt" : "http://mirrors.koehn.com/apache/ofbiz/apache-ofbiz-16.11.06.zip"
            },
            "files" : {
              "/tmp/update_ofbiz_config.sh" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash -xe\n",
                  "ofbizconfig=/opt/apache-ofbiz-16.11.06/framework/entity/config/entityengine.xml\n",
                  "sed -i 's/datasource-name=\"localderbyolap\"/datasource-name=\"localpostolap\"/g' $ofbizconfig\n",
                  "sed -i 's/datasource-name=\"localderbytenant\"/datasource-name=\"localposttenant\"/g' $ofbizconfig\n",
                  "sed -i 's/datasource-name=\"localderby\"/datasource-name=\"localpostgres\"/g' $ofbizconfig\n",
                  "sed -i 's/127.0.0.1/ofbiz-db.",{"Ref": "DomainName"},"/g' $ofbizconfig\n"
                ]]},
                "mode" : "000500",
                "owner" : "root",
                "group" : "root"
              },
              "/lib/systemd/system/ofbiz.service" : {
                "content" : { "Fn::Join" : [ "", [
                  "[Unit]\n",
                  "Description=OFBiz Service Daemon\n",
                  "After=network.target auditd.service\n",
                  "[Service]\n",
                  "WorkingDirectory=/opt/apache-ofbiz-16.11.06\n",
                  "ExecStart=/opt/apache-ofbiz-16.11.06/gradlew loadDefault ofbiz\n",
                  "ExecStop=/opt/apache-ofbiz-16.11.06/gradlew 'ofbiz --shutdown'\n"
                  ]]},
                "mode" : "000500",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_update_ofbiz_config" : {
                "command" : "/tmp/update_ofbiz_config.sh"
              },
              "02_init_wrapper" : {
                "command" : "gradle/init-gradle-wrapper.sh",
                "cwd" : "/opt/apache-ofbiz-16.11.06"
              },
              "03_load_pg_plugin" : {
                "command" : "./gradlew createPlugin -PpluginId=PostgressDemo",
                "cwd" : "/opt/apache-ofbiz-16.11.06"
              },
              "04_add_pg_plugin" : {
                "command" : "sed -i \"2i   pluginLibsRuntime 'postgresql:postgresql:9.0-801.jdbc4'\" /opt/apache-ofbiz-16.11.06/specialpurpose/PostgressDemo/build.gradle"
              }
            },
            "services" : {
              "sysvinit" : {
                "ofbiz" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          }
        }
      },

      "Properties": {
        "ImageId" : { "Ref" : "AWSRegionArch2AMI" },
        "InstanceType"   : { "Ref" : "WEBInstanceType" },
        "Tags" : [ {"Key" : "Environment", "Value" : "Source"}, {"Key" : "Name", "Value" : "MID-OFBiz-WEB" } ],
        "NetworkInterfaces" : [ {
                "DeviceIndex" : "0",
                "AssociatePublicIpAddress" : false,
                "SubnetId" : { "Ref" : "OnPremSimSubnet1" },
                "GroupSet": [ { "Ref": "WebServerSecurityGroup" } ]
              } ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "hostnamectl set-hostname ofbiz-web.",{"Ref": "DomainName"},"\n",
                       "yum update -y\n",
                       "amazon-linux-extras install postgresql9.6 -y\n",
                       "yum update -y aws-cfn-bootstrap\n",
                       "/opt/aws/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource WebServer ",
                       "         --configsets OFBiz_install ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",
                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource WebServer ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },

      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      }
    }
  },

  "Outputs" : {
    "WebsiteURL" : {
      "Value" : { "Fn::Join" : ["", ["https://OFBiz-web.",{"Ref": "DomainName"}, ":8443/accounting" ]]},
      "Description" : "OFBiz Website"
    }
  }
}