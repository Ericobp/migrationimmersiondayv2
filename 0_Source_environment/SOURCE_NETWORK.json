{
  "AWSTemplateFormatVersion" : "2010-09-09",  
  "Description" : "VPC template for the AWS Migration Immersion Day - Source Environment ",
  "Parameters": {
    
    "DomainName" : {
      "Description" : "The fully qualified name for the source VPC, such as onpremsim.env. The name doesn't need to be publicly resolvable; it will resolve inside your VPC only.",
      "Type" : "String",
      "MinLength" : "5",
      "MaxLength" : "16",
      "Default" : "onpremsim.env"
    },
    "AWSRegionArch2AMI" : {
      "Description" : "The latest AMI ID for Amazon Linux",
      "Type" : "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default" : "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs"
    },
    "DNSInstanceType" : {
      "Description" : "DNS EC2 instance type",
      "Type" : "String",
      "Default" : "t3.micro",
      "AllowedValues" : [ "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    }
    
  },

  "Resources" : {

    "VPCSource" : {
      "Type" : "AWS::EC2::VPC",
        "Properties" : {
          "CidrBlock" : "192.168.0.0/16",
          "EnableDnsHostnames" : true,
          "EnableDnsSupport" : true,
          "Tags" : [ {"Key" : "Environment", "Value" : "Source" }, {"Key" : "Name", "Value" : "Source" }  ]
        }
    },

    "SubnetSourcePublic" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId" : { "Ref" : "VPCSource" },
          "AvailabilityZone" : {
              "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]
          },
          "CidrBlock" : "192.168.0.0/24",
          "Tags" : [ {"Key" : "Environment", "Value" : "Source" }, {"Key" : "Name", "Value" : "SourcePublic" } ]
        }
    },

    "SubnetSourcePrivate" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId" : { "Ref" : "VPCSource" },
          "AvailabilityZone" : {
              "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]
          },
          "CidrBlock" : "192.168.1.0/24",
          "Tags" : [ {"Key" : "Environment", "Value" : "Source" }, {"Key" : "Name", "Value" : "SourcePrivate" } ]
        }
    },

    "InternetGatewaySource" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Environment", "Value" : "Source" }, {"Key" : "Name", "Value" : "Source" } ]
      }
    },

    "AttachGatewaySource" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "VPCSource" },
        "InternetGatewayId" : { "Ref" : "InternetGatewaySource" }
      }
    },

    "RouteTableSourcePublic" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPCSource"},
        "Tags" : [ {"Key" : "Environment", "Value" : "Source" }, {"Key" : "Name", "Value" : "Source_Public" } ]
      }
    },

    "RouteTableSourcePrivate" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPCSource"},
        "Tags" : [ {"Key" : "Environment", "Value" : "Source" }, {"Key" : "Name", "Value" : "Source_Private" } ]
      }
    },

    "RouteSourcePublic" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGatewaySource",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTableSourcePublic" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGatewaySource" }
      }
    },

    "RouteSourcePrivate" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTableSourcePrivate" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NAT" }
      }
    },

    "SubnetRouteTableAssociationSourcePublic" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetSourcePublic" },
        "RouteTableId" : { "Ref" : "RouteTableSourcePublic" }
      }
    },

    "SubnetRouteTableAssociationSourcePrivate" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetSourcePrivate" },
        "RouteTableId" : { "Ref" : "RouteTableSourcePrivate" }
      }
    },

    "NetworkAclSource" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPCSource"},
        "Tags" : [ {"Key" : "Environment", "Value" : "Source" }, {"Key" : "Name", "Value" : "Source" } ]
      }
    },

    "InboundNetworkAclEntrySource" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclSource"},
        "RuleNumber" : 100,
        "Protocol" : -1,
        "RuleAction" : "allow",
        "Egress" : false,
        "CidrBlock" : "0.0.0.0/0"
      }
    },

    "OutBoundNetworkAclEntrySource" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAclSource"},
        "RuleNumber" : 100,
        "Protocol" : -1,
        "RuleAction" : "allow",
        "Egress" : true,
        "CidrBlock" : "0.0.0.0/0"
      }
    },

    "SubnetNetworkAclAssociationSourcePublic" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetSourcePublic" },
        "NetworkAclId" : { "Ref" : "NetworkAclSource" }
      }
    },

    "SubnetNetworkAclAssociationSourcePrivate" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetSourcePrivate" },
        "NetworkAclId" : { "Ref" : "NetworkAclSource" }
      }
    },

    "myDhcpOptions" : {
      "Type" : "AWS::EC2::DHCPOptions",
      "Properties" : {
          "DomainName" : {"Ref": "DomainName" } ,
          "DomainNameServers" : [ "192.168.1.250" ],
          "Tags" : [ { "Key" : "Name", "Value" : "Source" } ]
      }
    },

    "myVPCDHCPOptionsAssociation" : {
      "DependsOn" : "DNSServer",
      "Type" : "AWS::EC2::VPCDHCPOptionsAssociation",
       "Properties" : {
          "VpcId" : {"Ref" : "VPCSource"},
          "DhcpOptionsId" : {"Ref" : "myDhcpOptions"}
          }
    },

    "NAT" : {
      "Type" : "AWS::EC2::NatGateway",
      "Properties" : {
         "AllocationId" : { "Fn::GetAtt" : ["EIP", "AllocationId"]},
         "SubnetId" : { "Ref" : "SubnetSourcePublic"},
         "Tags" : [ {"Key" : "Environment", "Value" : "Source" }, {"Key" : "Name", "Value" : "Source" }  ]
        }
    },

   "EIP" : {
    "DependsOn" : "AttachGatewaySource",
    "Type" : "AWS::EC2::EIP",
    "Properties" : { "Domain" : "VPCSource" }
   },

   "DNSSecurityGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
      "VpcId": { "Ref": "VPCSource" },
      "GroupDescription" : "Enable DNS access via port 53",
      "SecurityGroupIngress" : [
        {"IpProtocol" : "tcp", "FromPort" : 53, "ToPort" : 53, "CidrIp" : "192.168.0.0/16"},
        {"IpProtocol" : "udp", "FromPort" : 53, "ToPort" : 53, "CidrIp" : "192.168.0.0/16"},
        {"IpProtocol" : "icmp", "FromPort" : 8, "ToPort" : -1, "CidrIp" : "192.168.0.0/16" }
      ]
    }
   },

  "DNSServer": {
    "Type" : "AWS::EC2::Instance",
    "DependsOn" : "NAT",
    "Metadata" : {
      "AWS::CloudFormation::Init" : {
        "configSets" : {
          "dns_install" : ["install_cfn", "install_dns", "configure_dns" ]
        },
        "install_cfn" : {
          "files": {
            "/etc/cfn/cfn-hup.conf": {
              "content": { "Fn::Join": [ "", [
                "[main]\n",
                "stack=", { "Ref": "AWS::StackId" }, "\n",
                "region=", { "Ref": "AWS::Region" }, "\n"
              ]]},
              "mode"  : "000400",
              "owner" : "root",
              "group" : "root"
            },
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
              "content": { "Fn::Join": [ "", [
                "[cfn-auto-reloader-hook]\n",
                "triggers=post.update\n",
                "path=Resources.DNSServer.Metadata.AWS::CloudFormation::Init\n",
                "action=/opt/aws/bin/cfn-init -v ",
                        "         --stack ", { "Ref" : "AWS::StackName" },
                        "         --resource DNSServer ",
                        "         --configsets dns_install ",
                        "         --region ", { "Ref" : "AWS::Region" }, "\n"
              ]]},          
              "mode"  : "000400",
              "owner" : "root",
              "group" : "root"
            }
          },
          "services" : {
            "sysvinit" : {
              "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                            "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
            }
          }
        },

        "install_dns" : {
          "packages" : {
            "yum" : {
              "bind" : []
            }
          },
          
          "files" : {

            "/var/named/dynamic/source.zone" : {
              "content" : { "Fn::Join" : [ "", [
                "$TTL 2  ; 2 seconds \n",
                { "Ref" : "DomainName" },".    IN SOA  dns.",{ "Ref" : "DomainName" },". postmaster.",{ "Ref" : "DomainName" },". ( \n",
                "                2019010101 ; serial\n",
                "                28800      ; refresh (8 hours)\n",
                "                1800       ; retry (30 minutes)\n",
                "                604800     ; expire (1 week)\n",
                "                86400      ; minimum (1 day)\n",
                "                )\n",
                "        NS      dns.",{ "Ref" : "DomainName" },".\n",
                "dns IN A 192.168.1.250\n"
              ]]},
              "mode" : "000440",
              "owner" : "named",
              "group" : "named"
            },
            "/tmp/zone.conf" : {
              "content" : { "Fn::Join" : [ "", [
                "zone \"",{ "Ref" : "DomainName" },"\" IN {\n",
                "  type master;\n",
                "  file \"dynamic/source.zone\";\n",
                "  allow-update { 127.0.0.1; 192.168.0.0/16; };\n",
                "  notify no;\n",
                "};"
              ]]},
              "mode" : "000400",
              "owner" : "root",
              "group" : "root"
            },
            
            "/tmp/config-ddns.sh" : {
              "content" : { "Fn::Join" : [ "", [
                "#!/bin/bash -xe\n",
                "sed -i \"s/127.0.0.1;/any;/g\" /etc/named.conf\n",
                "sed -i \"s/localhost;/any;/g\" /etc/named.conf\n",
                "sed -i \"s/dnssec-enable yes;/dnssec-enable no;/g\" /etc/named.conf\n",
                "sed -i \"s/dnssec-validation yes;/dnssec-validation no;/g\" /etc/named.conf\n",
                "cat /tmp/zone.conf >> /etc/named.conf\n",
                "systemctl restart named\n"
              ]]},
              "mode" : "000500",
              "owner" : "root",
              "group" : "root"
            }
          },
          "services" : {
            "sysvinit" : {
              "named"  : { "enabled" : "true", "ensureRunning" : "true" }
            }
          }
        },

        "configure_dns" : {
          "commands" : {
            "/tmp/config-ddns.sh" : {
              "command" : "/bin/bash /tmp/config-ddns.sh"
            }
          }
        }
      }
    },

    "Properties": {
      "ImageId" : { "Ref" : "AWSRegionArch2AMI" },
      "InstanceType"   : { "Ref" : "DNSInstanceType" },
      "Tags" : [ {"Key" : "Environment", "Value" : "Source" }, {"Key" : "Name", "Value" : "MID-DNS" } ],
      "NetworkInterfaces" : [ {
              "DeviceIndex" : "0",
              "AssociatePublicIpAddress" : false,
              "PrivateIpAddress" : "192.168.1.250",
              "SubnetId" : { "Ref" : "SubnetSourcePrivate" },
              "GroupSet": [ { "Ref": "DNSSecurityGroup" } ]
            } ],
      "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                     "#!/bin/bash -xe\n",
                     "hostnamectl set-hostname dns.",{"Ref": "DomainName"},"\n", 
                     "yum update -y\n",
                     "amazon-linux-extras install lamp-mariadb10.2-php7.2 -y\n",
                     "yum update -y aws-cfn-bootstrap\n",
                     "/opt/aws/bin/cfn-init -v ",
                     "         --stack ", { "Ref" : "AWS::StackName" },
                     "         --resource DNSServer ",
                     "         --configsets dns_install ",
                     "         --region ", { "Ref" : "AWS::Region" }, "\n",
                     "/opt/aws/bin/cfn-signal -e $? ",
                     "         --stack ", { "Ref" : "AWS::StackName" },
                     "         --resource DNSServer ",
                     "         --region ", { "Ref" : "AWS::Region" }, "\n"
      ]]}}
    },

    "CreationPolicy" : {
      "ResourceSignal" : {
        "Timeout" : "PT30M"
      }
    }
  }
  

  },
  "Outputs" : {
    "VPCSource" : {
      "Description" : "The VPC ID to use for the resources in the Source OnPrem Environment",
      "Value" :  { "Ref" : "VPCSource" },
      "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-VPCSource" }}
    },
    "SubnetSourcePublic" : {
      "Description" : "The subnet ID to use for public servers in the Target Source Environment",
      "Value" :  { "Ref" : "SubnetSourcePublic" },
      "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-SubnetSourcePublic" }}
    },
    "SubnetSourcePrivate" : {
      "Description" : "The subnet ID to use for private servers in the Target Source Environment",
      "Value" :  { "Ref" : "SubnetSourcePrivate" },
      "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-SubnetSourcePrivate" }}
    }

  }
}