{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS CloudFormation Sample Template WordPress_Single_Instance: WordPress is web software you can use to create a beautiful website or blog. This template installs WordPress with a local MariaDB database for storage. It demonstrates using the AWS CloudFormation bootstrap scripts to deploy WordPress. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {

    "DomainName" : {
      "Description" : "The fully qualified name for the source VPC, such as onpremsim.env. The name doesn't need to be publicly resolvable; it will resolve inside your VPC only.",
      "Type" : "String",
      "MinLength" : "5",
      "MaxLength" : "16",
      "Default" : "onpremsim.env"
    },

    "WEBInstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t3.small",
      "AllowedValues" : [ "t3.nano", "t3.micro", "t3.small", "t3.medium", "t3.large" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "OnPremSimVPC" : {
        "Description" : "VPC to place Wordpress.",
        "Type" : "AWS::EC2::VPC::Id"
    },
  
    "OnPremSimSubnet1" : {
       "Description" : "Private Subnet to place Wordpress.",
       "Type" : "AWS::EC2::Subnet::Id"
    },

    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DBName" : {
      "Default": "wordpressdb",
      "Description" : "The WordPress database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBUser" : {
      "Default": "wordpress",
      "Description" : "The WordPress database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBPassword" : {
      "NoEcho": "true",
      "Default": "wordpress123456",
      "Description" : "The WordPress database admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "DBRootPassword" : {
      "NoEcho": "true",
      "Default": "wordpress123456",
      "Description" : "MariaDB root password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "AWSRegionArch2AMI" : {
      "Description" : "The latest AMI ID for Amazon Linux",
      "Type" : "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default" : "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs"
    }
  },


  "Resources" : {
    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId": { "Ref": "OnPremSimVPC" },
        "GroupDescription" : "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80, "CidrIp" : "192.168.0.0/16"},
          {"IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "icmp", "FromPort" : 8, "ToPort" : -1, "CidrIp" : "192.168.0.0/16" }
        ]
      }
    },
    "DatabaseSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId": { "Ref": "OnPremSimVPC" },
        "GroupDescription" : "Enable mariadb access via port 3306 locked down to the load balancer + SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : 3306, "ToPort" : 3306, "CidrIp" : "192.168.0.0/16"},
          {"IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "icmp", "FromPort" : 8, "ToPort" : -1, "CidrIp" : "192.168.0.0/16" }
        ]
      }
    },

    "DBServer": {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "wordpress_install" : ["install_cfn", "register_dns", "setup_ssh", "install_wordpress", "configure_wordpress" ]
          },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.DBServer.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource DBServer ",
                          "         --configsets wordpress_install ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},          
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },

          "register_dns" : {
            "files" : {
              "/tmp/nsupdate.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "ADDR=`/sbin/ifconfig eth0 | grep 'inet ' | awk '{print $2}' | sed -e s/.*://`\n",
                  "HOST=`hostname`\n",
                  "echo \"server dns.",{"Ref": "DomainName"},"\" > /tmp/nsupdate.txt\n",
                  "echo \"update delete $HOST A\" >> /tmp/nsupdate.txt\n",
                  "echo \"update add $HOST 86400 A $ADDR\" >> /tmp/nsupdate.txt\n",
                  "echo \"update delete $HOST PTR\" >> /tmp/nsupdate.txt\n",
                  "echo \"update add $HOST 86400 PTR $ADDR\" >> /tmp/nsupdate.txt\n",
                  "echo \"send\" >> /tmp/nsupdate.txt\n"               
                   ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "register_dns" : {
                "command" : "/tmp/nsupdate.sh ; nsupdate /tmp/nsupdate.txt"
              }
            }
          },

          "setup_ssh" : {
            "files" : {
              "/tmp/adduser.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "adduser user -g wheel\n",
                  "echo ",{ "Ref" : "DBRootPassword" }," | passwd user --stdin\n"            
                   ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              },
              "/tmp/fixssh.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\n",
                  "systemctl restart sshd"
                   ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_create_user" : {
                "command" : "/tmp/adduser.sh"
              },
              "02_fix_ssh" : {
                "command" : "/tmp/fixssh.sh"
              }
            }
          },

          "install_wordpress" : {
            "packages" : {
              "yum" : {
                "mariadb"        : [],
                "mariadb-server" : [],
                "mariadb-devel"  : [],
                "mariadb-libs"   : []
              }
            },
            "sources" : {
              "/var/www/html" : "http://wordpress.org/latest.tar.gz"
            },
            "files" : {
              "/tmp/setup.mariadb" : {
                "content" : { "Fn::Join" : ["", [
                  "CREATE DATABASE ", { "Ref" : "DBName" }, ";\n",
                  "CREATE USER '", { "Ref" : "DBUser" }, "'@'%' IDENTIFIED BY '", { "Ref" : "DBPassword" }, "';\n",
                  "GRANT ALL ON ", { "Ref" : "DBName" }, ".* TO '", { "Ref" : "DBUser" }, "'@'%';\n",
                  "FLUSH PRIVILEGES;\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "mariadb" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          },

          "configure_wordpress" : {
            "commands" : {
              "01_set_mariadb_root_password" : {
                "command" : { "Fn::Join" : ["", ["mysqladmin -u root password '", { "Ref" : "DBRootPassword" }, "'"]]},
                "test" : { "Fn::Join" : ["", ["$(mysql ", { "Ref" : "DBName" }, " -u root --password='", { "Ref" : "DBRootPassword" }, "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"]]}
              },
              "02_create_database" : {
                "command" : { "Fn::Join" : ["", ["mysql -u root --password='", { "Ref" : "DBRootPassword" }, "' < /tmp/setup.mariadb"]]},
                "test" : { "Fn::Join" : ["", ["$(mysql ", { "Ref" : "DBName" }, " -u root --password='", { "Ref" : "DBRootPassword" }, "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"]]}
              }
            }
          }
        }
      },

      "Properties": {
        "ImageId" : { "Ref" : "AWSRegionArch2AMI" },
        "InstanceType"   : { "Ref" : "WEBInstanceType" },
        "Tags" : [ {"Key" : "Environment", "Value" : "Source"}, {"Key" : "Name", "Value" : "MID-Wordpress-DB" } ],
        "NetworkInterfaces" : [ {
                "DeviceIndex" : "0",
                "AssociatePublicIpAddress" : false,
                "SubnetId" : { "Ref" : "OnPremSimSubnet1" },
                "GroupSet": [ { "Ref": "DatabaseSecurityGroup" } ]
              } ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "hostnamectl set-hostname wordpress-db.",{"Ref": "DomainName"},"\n",
                       "yum update -y\n",
                       "amazon-linux-extras install lamp-mariadb10.2-php7.2 -y\n",
                       "yum update -y aws-cfn-bootstrap\n",
                       "/opt/aws/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource DBServer ",
                       "         --configsets wordpress_install ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",
                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource DBServer ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },

      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      }
    },

    
    "WebServer": {
      "DependsOn": "DBServer",
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "wordpress_install" : ["install_cfn", "register_dns", "setup_ssh", "install_wordpress", "configure_wordpress" ]
          },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.WebServer.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource WebServer ",
                          "         --configsets wordpress_install ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},          
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },

          "register_dns" : {
            "files" : {
              "/tmp/nsupdate.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "ADDR=`/sbin/ifconfig eth0 | grep 'inet ' | awk '{print $2}' | sed -e s/.*://`\n",
                  "HOST=`hostname`\n",
                  "echo \"server dns.",{"Ref": "DomainName"},"\" > /tmp/nsupdate.txt\n",
                  "echo \"update delete $HOST A\" >> /tmp/nsupdate.txt\n",
                  "echo \"update add $HOST 86400 A $ADDR\" >> /tmp/nsupdate.txt\n",
                  "echo \"update delete $HOST PTR\" >> /tmp/nsupdate.txt\n",
                  "echo \"update add $HOST 86400 PTR $ADDR\" >> /tmp/nsupdate.txt\n",
                  "echo \"send\" >> /tmp/nsupdate.txt\n"               
                   ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "register_dns" : {
                "command" : "/tmp/nsupdate.sh ; nsupdate /tmp/nsupdate.txt"
              }
            }
          },

          "setup_ssh" : {
            "files" : {
              "/tmp/adduser.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "adduser user -g wheel\n",
                  "echo ",{ "Ref" : "DBRootPassword" }," | passwd user --stdin\n"            
                   ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              },
              "/tmp/fixssh.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\n",
                  "systemctl restart sshd"
                   ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_create_user" : {
                "command" : "/tmp/adduser.sh"
              },
              "02_fix_ssh" : {
                "command" : "/tmp/fixssh.sh"
              }
            }
          },

          "install_wordpress" : {
            "packages" : {
              "yum" : {
                "php"            : [],
                "mariadb"        : [],
                "mariadb-devel"  : [],
                "mariadb-libs"   : [],
                "httpd"          : []
              }
            },
            "sources" : {
              "/var/www/html" : "http://wordpress.org/latest.tar.gz"
            },
            "files" : {
              "/tmp/create-wp-config" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash -xe\n",
                  "mv /var/www/html/wordpress/* /var/www/html/\n",
                  "cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php\n",
                  "sed -i \"s/'localhost'/'wordpress-db.",{ "Ref" : "DomainName" }, "'/g\" wp-config.php\n",
                  "sed -i \"s/'database_name_here'/'",{ "Ref" : "DBName" }, "'/g\" wp-config.php\n",
                  "sed -i \"s/'username_here'/'",{ "Ref" : "DBUser" }, "'/g\" wp-config.php\n",
                  "sed -i \"s/'password_here'/'",{ "Ref" : "DBPassword" }, "'/g\" wp-config.php\n"
                ]]},
                "mode" : "000500",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "httpd"  : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          },

          "configure_wordpress" : {
            "commands" : {
              "01_configure_wordpress" : {
                "command" : "/tmp/create-wp-config",
                "cwd" : "/var/www/html"
              },
              "04_setup_wordpress" : {
                "command" : { "Fn::Join" : ["", 
                                    [ "/usr/bin/curl -v --data-urlencode 'weblog_title=Migration Immersion Day' --data-urlencode 'user_name=admin' ",
                                                     "--data-urlencode 'admin_password=",{ "Ref" : "DBRootPassword" },"' --data-urlencode 'admin_password2=",{ "Ref" : "DBRootPassword" },"' ",
                                                     "--data-urlencode 'admin_email=admin@admin.com' --data-urlencode 'Submit=Install+WordPress' ",
                                                     "http://wordpress-web.",{"Ref": "DomainName"},"/wp-admin/install.php?step=2" ]
                ]}
              }

            }
          }
        }
      },

      "Properties": {
        "ImageId" : { "Ref" : "AWSRegionArch2AMI" },
        "InstanceType"   : { "Ref" : "WEBInstanceType" },
        "Tags" : [ {"Key" : "Environment", "Value" : "Source"}, {"Key" : "Name", "Value" : "MID-Wordpress-WEB" } ],
        "NetworkInterfaces" : [ {
                "DeviceIndex" : "0",
                "AssociatePublicIpAddress" : false,
                "SubnetId" : { "Ref" : "OnPremSimSubnet1" },
                "GroupSet": [ { "Ref": "WebServerSecurityGroup" } ]
              } ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "hostnamectl set-hostname wordpress-web.",{"Ref": "DomainName"},"\n",
                       "yum update -y\n",
                       "amazon-linux-extras install lamp-mariadb10.2-php7.2 -y\n",
                       "yum update -y aws-cfn-bootstrap\n",
                       "/opt/aws/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource WebServer ",
                       "         --configsets wordpress_install ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",
                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource WebServer ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },

      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      }
    }
  },

  "Outputs" : {
    "WebsiteURL" : {
      "Value" : { "Fn::Join" : ["", ["http://wordpress-web.",{"Ref": "DomainName"}, "/" ]]},
      "Description" : "WordPress Website"
    }
  }
}